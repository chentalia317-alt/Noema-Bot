name: "Command: /analyze (restore minimal)"

on:
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  analyze:
    # 手动触发直接跑；评论触发仅限 Issue 且 /analyze 开头
    if: >
      ${{
        github.event_name == 'workflow_dispatch' ||
        (
          github.event_name == 'issue_comment' &&
          github.event.issue.pull_request == null &&
          startsWith(github.event.comment.body, '/analyze')
        )
      }}
    runs-on: ubuntu-latest

    env:
      ALLOWED_USER: ""  # 先别限用户，确认链路通了再加

    steps:
      # 调试：一眼看出触发来源
      - name: Debug event
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "is_pr_comment=$(( ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request != null }} ))"
          echo "comment_user=${{ github.event_name == 'issue_comment' && github.event.comment.user.login || '' }}"
          echo "comment_body=${{ github.event_name == 'issue_comment' && github.event.comment.body || '' }}"

      # 可选：白名单（先禁用，等恢复后你再开启）
      - name: Guard allowlist
        if: ${{ github.event_name == 'issue_comment' && env.ALLOWED_USER != '' && github.event.comment.user.login != env.ALLOWED_USER }}
        run: |
          echo "Blocked: user '${{ github.event.comment.user.login }}' is not allowed."
          exit 1

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 解析 /analyze file=xxx.csv（评论触发时）
      - name: Parse args (issue_comment)
        if: ${{ github.event_name == 'issue_comment' }}
        id: args
        shell: bash
        run: |
          RAW="${{ github.event.comment.body }}"
          FILE=$(echo "$RAW" | sed -n 's/.*file=\([A-Za-z0-9._\/\-]\+\).*/\1/p')
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      # 手动触发给空默认
      - name: Default args (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: args
        run: echo "file=" >> "$GITHUB_OUTPUT"

      - name: Run analysis
        env:
          FILE: ${{ steps.args.outputs.file }}
        run: |
          echo "Analyzing FILE=${FILE:-<ALL in data/>}"
          python scripts/analyze.py

      # 产物可在 Actions 页面下载
      - name: Upload artifacts
        if: success() && hashFiles('reports/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: analyze-report
          path: reports/

      # 简要回帖（仅评论触发）
      - name: Read summary
        id: summary
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          if [ -f report_summary.json ]; then
            MD=$(jq -r '.markdown' report_summary.json)
          else
            MD="No summary produced by analysis."
          fi
          {
            echo "md<<EOF"
            echo "$MD"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Comment back
        if: ${{ github.event_name == 'issue_comment' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ✅ Analysis finished.
            Artifacts: see this run → **Actions** (top-right “Artifacts”).
            ---
            ${{ steps.summary.outputs.md }}

    concurrency:
      group: analyze-${{ github.event_name }}-${{ github.ref || github.run_id }}
      cancel-in-progress: true
