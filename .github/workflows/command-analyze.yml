name: "Command: /analyze"

on:
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  analyze:
    # 允许手动触发；或在 Issue 中以 /analyze 开头的评论触发
    if: >
      ${{
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'issue_comment' &&
         github.event.issue.pull_request == null &&
         startsWith(github.event.comment.body, '/analyze'))
      }}
    runs-on: ubuntu-latest

    env:
      TARGET_BRANCH: ${{ github.event.repository.default_branch }}  # mostly main
      # optional：仅允许某个用户在评论触发
      ALLOWED_USER: chentalia317-alt

    steps:
      # ====== 仅在评论触发时进行白名单校验 ======
      - name: Guard allowlist
        if: ${{ github.event_name == 'issue_comment' && env.ALLOWED_USER != '' && github.event.comment.user.login != env.ALLOWED_USER }}
        run: |
          echo "Blocked: user '${{ github.event.comment.user.login }}' is not allowed."
          exit 1

      - name: Checkout repository (no persisted creds)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ====== 解析 /analyze 参数（仅评论触发）======
      - name: Parse /analyze args (issue_comment)
        if: ${{ github.event_name == 'issue_comment' }}
        id: args
        shell: bash
        run: |
          RAW="${{ github.event.comment.body }}"
          FILE=$(echo "$RAW" | sed -n 's/.*file=\([A-Za-z0-9._\/\-]\+\).*/\1/p')
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      # ====== 手动触发时提供一个空的默认参数 ======
      - name: Set default args (manual dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: args
        run: echo "file=" >> "$GITHUB_OUTPUT"

      - name: Run analysis script
        env:
          FILE: ${{ steps.args.outputs.file }}   # 为空则分析 data/ 下所有可识别文件
        run: |
          echo "Analyzing FILE=${FILE:-<ALL in data/>}"
          python scripts/analyze.py

      # -------- Quarkdown 报告构建（可选）---------
      - name: Set up Node (for Quarkdown)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Quarkdown CLI
        run: npm install -g quarkdown || true

      - name: Build HTML report from Markdown
        run: |
          mkdir -p reports
          if [ -f "reports/REPORT.md" ]; then
            echo "Found reports/REPORT.md, building HTML..."
            npx -y quarkdown-cli@latest compile reports/REPORT.md -o reports/noema-report.qd || true
            npx -y quarkdown-cli@latest render reports/noema-report.qd -o reports/noema-report.html || true
          else
            echo "reports/REPORT.md not found; skipping HTML build."
          fi

      - name: Configure git as Noema-Bot
        run: |
          git config user.name "Noema-Bot"
          git config user.email "noema-bot@users.noreply.github.com"

      - name: Publish HTML to docs/ for GitHub Pages
        run: |
          if [ -f reports/noema-report.html ]; then
            mkdir -p docs/reports
            cp -f reports/noema-report.html docs/reports/noema-report.html
            echo "Copied HTML to docs/ for Pages."
          else
            echo "noema-report.html not found, skip Pages publish."
          fi

      - name: Commit report artifacts
        run: |
          mkdir -p reports
          git add reports/ report_summary.json docs/ || true
          git diff --cached --quiet && echo "No changes to commit." || git commit -m "chore: update analysis artifacts [skip ci]"

      - name: Push with BOT_TOKEN (PAT)
        if: ${{ success() }}
        env:
          GH_PAT: ${{ secrets.BOT_TOKEN }}     # 需在仓库 Settings→Secrets 配置，scopes 建议：repo, workflow
        run: |
          if git rev-parse -q --verify HEAD >/dev/null; then
            git push "https://${GH_PAT}@github.com/${{ github.repository }}.git" HEAD:${TARGET_BRANCH}
          fi

      - name: Read report summary
        id: summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          if [ -f report_summary.json ]; then
            MD=$(jq -r '.markdown' report_summary.json)
          else
            MD="No summary produced by analysis."
          fi
          {
            echo "md<<EOF"
            echo "$MD"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Comment back as Noema-Bot
        if: ${{ github.event_name == 'issue_comment' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            🤖 **Noema-Bot** finished the analysis.

            **Reports directory:**  
            https://github.com/${{ github.repository }}/tree/${{ env.TARGET_BRANCH }}/reports

            - Markdown summary:  
              https://github.com/${{ github.repository }}/blob/${{ env.TARGET_BRANCH }}/reports/REPORT.md
            - Quarkdown HTML (if generated):  
              https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/noema-report.html
              _(The first start of Pages may take 10–60s)_
            ---
            ${{ steps.summary.outputs.md }}

    concurrency:
        group: analyze-${{ github.event_name }}-${{ github.ref || github.run_id }}
        cancel-in-progress: true


