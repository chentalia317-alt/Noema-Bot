from pathlib import Path
import os, json, sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

DATA_DIR = Path("data")
OUT_DIR = Path("reports")
OUT_DIR.mkdir(parents=True, exist_ok=True)

def load_table(fp: Path) -> pd.DataFrame:
    if fp.suffix.lower() == ".csv":
        return pd.read_csv(fp)
    if fp.suffix.lower() in (".xls", ".xlsx"):
        return pd.read_excel(fp)
    if fp.suffix.lower() == ".json":
        return pd.read_json(fp)
    raise ValueError(f"Unsupported file: {fp.name}")

def numeric_cols(df: pd.DataFrame, limit: int | None = None) -> list[str]:
    cols = df.select_dtypes(include="number").columns.tolist()
    return cols[:limit] if limit else cols

def plot_hist(df: pd.DataFrame, col: str, out_png: Path):
    import matplotlib
    matplotlib.use("Agg")        # rendering (even without environment)
    import matplotlib.pyplot as plt
    plt.figure()
    df[col].dropna().astype(float).plot(kind="hist", bins=30)
    plt.title(f"{col} histogram"); plt.xlabel(col); plt.ylabel("count")
    plt.tight_layout(); plt.savefig(out_png, dpi=150); plt.close()

def analyze_one(fp: Path) -> dict:
    name = fp.stem
    df = load_table(fp)

    # overview statistics
    summary_csv = OUT_DIR / f"{name}_summary.csv"
    df.describe(include="all").T.to_csv(summary_csv)

    # !!! draw histogram for all numeric columnÔºàN=8,limitation, can be changedÔºâ
    N = 8
    pngs = []
    for col in numeric_cols(df, limit=N):
        out_png = OUT_DIR / f"{name}_{col}_hist.png"
        try:
            plot_hist(df, col, out_png)
            pngs.append(out_png.name)
        except Exception as e:
            pngs.append(f"(failed: {col} -> {e})")

    # Report (adding histogramsÔºâ
    lines = [
        f"### {fp.name}",
        f"- rows: **{df.shape[0]}**, cols: **{df.shape[1]}**",
        f"- numeric columns: `{', '.join(numeric_cols(df)[:N])}`"
          + (" (+ more)" if len(numeric_cols(df)) > N else ""),
        f"- summary: `reports/{summary_csv.name}`",
        "",
        "#### Distributions",
    ]
    for p in pngs:
        if p.endswith(".png"):
            # When HTML is placed in the "reports/Noema-Report/" directory, one needs to go back to the parent directory.
            # If you used `--flat` in the workflow, change the path to simply `!` [](./{p})`
            lines.append(f"![](../{p})")
        else:
            lines.append(f"- {p}")
    return {
        "data_file": str(fp),
        "summary_csv": str(summary_csv),
        "plots": pngs,
        "report_md": "\n".join(lines),
    }


def main():
    # Supports optional single-file analysis, can be passed through the environment variable FILE=xxx.csv
    only = os.getenv("FILE", "").strip()
    targets = []
    if only:
        p = DATA_DIR / only
        if not p.exists():
            print(f"[WARN] {p} not found under data/. Fallback to all files.")
        else:
            targets = [p]

    if not targets:
        targets = [p for p in DATA_DIR.glob("**/*") if p.suffix.lower() in (".csv",".xls",".xlsx",".json")]

    if not targets:
        note = "No data files in data/. Nothing to analyze."
        print(note)
        Path("report_summary.json").write_text(json.dumps({"markdown": note}, ensure_ascii=False), encoding="utf-8")
        return

    blocks = ["## üß™ Auto Analysis Report"]
    outputs = []
    for fp in targets:
        try:
            res = analyze_one(fp)
            outputs.append(res)
            blocks.append(res["report_md"])
        except Exception as e:
            blocks.append(f"- **{fp.name}** ‚ùå {e}")

        # summary(report)
    report_md = "\n\n".join(blocks)
    (OUT_DIR / "REPORT.md").write_text(report_md, encoding="utf-8")
    Path("report_summary.json").write_text(
        json.dumps({"markdown": report_md, "items": outputs}, ensure_ascii=False),
        encoding="utf-8"
    )

    # === generating Quarkdown (.qd) ===
    qd = f""".docname {{Noema Report}}
.doctype {{paged}}      # can be changed to slides / plain
.theme {{darko}}        # can be changed  toÔºàdarko, lighto, classic...Ôºâ

# Auto Analysis Summary
This report was generated by Noema-Bot.

{report_md}

.tableofcontents
"""
    Path("noema-report.qd").write_text(qd, encoding="utf-8")

    print("Analysis finished.")
    
if __name__ == "__main__":
    main()
